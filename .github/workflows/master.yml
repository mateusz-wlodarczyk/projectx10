name: Master Branch Quality Gate

on:
  push:
    branches: [main] # Using main as master branch
  workflow_dispatch: # Manual trigger for production readiness check

env:
  NODE_VERSION: "22"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality Check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-nodejs
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run linting
        run: npm run ci:lint

      - name: Check code formatting
        run: |
          echo "Checking code formatting..."
          # Add formatting check if you have prettier/eslint configured
          # npm run format:check

  # Job 2: Unit Tests with Coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-nodejs
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Unit Tests
        uses: ./.github/actions/run-unit-tests
        with:
          coverage-suffix: "-master"

      - name: Coverage Summary
        run: |
          echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 Coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 Coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY

  # Job 3: Build Verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-nodejs
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Packages
        uses: ./.github/actions/build-packages
        with:
          build-suffix: "-master"

  # Job 4: Docker Image Build (for production readiness)
  docker-build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs: build-verification

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: packages/backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: packages/frontend
          file: packages/frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # Job 6: Production Readiness Summary
  production-readiness:
    name: Production Readiness Summary
    runs-on: ubuntu-latest
    needs:
      [
        code-quality,
        unit-tests,
        build-verification,
        docker-build,
        security-scan,
      ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports/

      - name: Generate Production Readiness Report
        run: |
          echo "## 🚀 Production Readiness Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Checks:" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result == 'success' ? '✅ Passed' : '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests**: ${{ needs.unit-tests.result == 'success' ? '✅ Passed' : '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Verification**: ${{ needs.build-verification.result == 'success' ? '✅ Passed' : '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Build**: ${{ needs.docker-build.result == 'success' ? '✅ Passed' : '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result == 'success' ? '✅ Passed' : '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if all jobs passed
          if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.build-verification.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "### 🎉 Production Status: READY FOR DEPLOYMENT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All quality checks have passed successfully. The branch is ready for production deployment." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Available Docker Images:" >> $GITHUB_STEP_SUMMARY
            echo "- Backend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Frontend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Production Status: NOT READY" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some quality checks have failed. Please review and fix the issues before deploying to production." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Reports:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This report was automatically generated by the Master Branch Quality Gate.*" >> $GITHUB_STEP_SUMMARY

  # Job 7: Deploy to Production (Manual trigger only)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs:
      [
        code-quality,
        unit-tests,
        build-verification,
        docker-build,
        security-scan,
      ]
    if: github.event_name == 'workflow_dispatch' && needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' && needs.build-verification.result == 'success' && needs.docker-build.result == 'success' && needs.security-scan.result == 'success'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to production..."
          echo "Using Docker images:"
          echo "- Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}"
          echo "- Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}"
          echo ""
          echo "Deployment to DigitalOcean would happen here"
          echo "All quality checks passed - safe to deploy!"

      - name: Deployment Notification
        run: |
          echo "## 🎉 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The application has been successfully deployed to production." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Images:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deployment completed at: $(date)" >> $GITHUB_STEP_SUMMARY
